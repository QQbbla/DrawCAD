import matplotlib.pyplot as plt
import matplotlib.patches as patches
import matplotlib.font_manager as fm
from shapely.geometry import box, Polygon, MultiPolygon
from shapely.ops import unary_union

# --- 字体设置 ---
# (与之前相同)
font_path = None
try:
    for font in fm.fontManager.ttflist:
        if 'Arial Unicode MS' in font.name:
            font_path = font.fname
            break
    if font_path:
        my_font = fm.FontProperties(fname=font_path, size=12)
        title_font = fm.FontProperties(fname=font_path, size=24)
        legend_font = fm.FontProperties(fname=font_path, size=14)
    else:
        print("警告：系统中未找到 'Arial Unicode MS' 字体，将使用默认字体。")
        my_font = fm.FontProperties(size=12)
        title_font = fm.FontProperties(size=24)
        legend_font = fm.FontProperties(size=14)
except Exception as e:
    print(f"字体设置时出错: {e}")
    my_font = fm.FontProperties(size=12)
    title_font = fm.FontProperties(size=24)
    legend_font = fm.FontProperties(size=14)

# --- 数据定义 ---
grid_size = 80
alpha_value = 0.75 # 透明度

# 功能区域数据
functional_areas = {
    "明档": {"coords": [(40, 40), (120, 40), (200, 40), (40, 120), (120, 120), (200, 120), (40, 200), (120, 200), (200, 200), (40, 280), (120, 280), (200, 280), (40, 360), (120, 360), (200, 360), (40, 440), (120, 440), (200, 440), (40, 520), (120, 520), (200, 520), (40, 600), (120, 600), (200, 600), (40, 680), (120, 680), (200, 680), (40, 760), (120, 760), (200, 760), (40, 840)], "color": "#ffcc99"},
    "配菜间": {"coords": [(280, 40), (360, 40), (440, 40), (280, 120), (360, 120), (440, 120), (520, 120), (280, 200), (360, 200), (440, 200), (520, 200), (280, 280), (360, 280), (440, 280), (520, 280), (280, 360), (360, 360), (440, 360), (520, 360), (280, 440), (360, 440), (440, 440), (520, 440), (280, 520), (360, 520), (440, 520), (520, 520), (280, 600), (360, 600), (440, 600), (520, 600), (280, 680), (360, 680), (440, 680), (520, 680), (280, 760), (360, 760), (440, 760), (520, 760), (280, 840), (360, 840), (440, 840)], "color": "#aed9e0"},
    "粗加工间": {"coords": [(600, 120), (600, 200), (680, 200), (600, 280), (680, 280), (600, 360), (680, 360), (600, 440), (680, 440), (600, 520), (600, 600), (600, 680), (680, 680), (600, 760), (600, 840)], "color": "#b8e986"},
    "凉菜": {"coords": [(520, 1000), (280, 1080), (360, 1080), (440, 1080), (520, 1080), (600, 1080), (360, 1160), (440, 1160), (520, 1160), (600, 1160), (360, 1240), (440, 1240), (520, 1240), (360, 1320), (440, 1320)], "color": "#fff1a7"},
    "小吃": {"coords": [(120, 1000), (200, 1000), (40, 1080), (120, 1080), (200, 1080), (40, 1160), (120, 1160), (200, 1160), (40, 1240), (120, 1240), (200, 1240), (280, 1240), (40, 1320), (120, 1320), (200, 1320), (280, 1320)], "color": "#e6c9e1"},
    "洗杯": {"coords": [(1240, 40), (1240, 120), (1320, 120), (1240, 200), (1320, 200), (1400, 200), (1480, 200), (1240, 280), (1320, 280), (1400, 280), (1240, 360), (1320, 360), (1400, 360), (1480, 360), (1240, 440), (1320, 440), (1400, 440), (1480, 440), (1240, 520), (1320, 520), (1400, 520), (1320, 600), (1400, 600), (1320, 680), (1400, 680), (1320, 760)], "color": "#b2dfdb"},
    "洗碗": {"coords": [(1000, 40), (1080, 40), (1160, 40), (1000, 120), (1080, 120), (1160, 120), (1080, 200), (1160, 200), (1080, 280), (1160, 280), (1080, 360), (1160, 360), (1080, 440), (1160, 440), (1080, 520), (1160, 520), (1080, 600), (1160, 600), (1080, 680), (1160, 680), (1240, 680), (1080, 760), (1160, 760), (1240, 760), (1080, 840), (1160, 840), (1080, 920)], "color": "#ffab91"},
    "洗毛巾": {"coords": [(840, 40), (920, 40), (840, 120), (920, 120), (920, 200), (920, 280), (1000, 281), (920, 360), (1000, 360), (920, 440), (1000, 440), (840, 521), (920, 520), (1000, 520), (840, 601), (920, 600), (1000, 600), (920, 680), (1000, 680), (840, 761), (920, 760), (1000, 760), (840, 841), (920, 840), (1000, 840), (920, 921), (1000, 920)], "color": "#d1c4e9"},
    "仓储模块": {"coords": [(1720, 281), (1800, 281), (1720, 361), (1800, 361), (1720, 441), (1800, 441), (1640, 521), (1720, 521), (1800, 521), (1640, 601), (1720, 601), (1800, 601), (1880, 601), (1640, 681), (1720, 681), (1800, 681), (1880, 681), (1640, 761), (1720, 761), (1800, 761), (1880, 761), (1640, 841), (1720, 841), (1640, 921), (1720, 921), (1880, 281), (1880, 361), (1880, 441), (1880, 521), (1960, 521), (1960, 601), (1960, 681), (1960, 761), (1800, 841), (1880, 841), (1960, 841), (1800, 921), (1640, 1001), (1720, 1001), (1800, 1001)], "color": "#cfd8dc"}
}

# 准备所有点的列表，用于计算总外框
all_points = [
    (40, 41), (120, 41), (200, 41), (280, 41), (360, 41), (440, 41), (520, 41), (600, 41), (680, 41), (760, 41),
    (840, 41), (920, 41), (1000, 41), (1080, 41), (1160, 41), (1240, 41), (1320, 41), (1400, 41), (1480, 41), (1560, 41),
    (1640, 41), (1720, 41), (1800, 41), (1880, 41), (1960, 41), (2040, 41), (2120, 41), (2200, 41), (40, 121), (120, 121),
    (200, 121), (280, 121), (360, 121), (440, 121), (520, 121), (600, 121), (680, 121), (760, 121), (840, 121), (920, 121),
    (1000, 121), (1080, 121), (1160, 121), (1240, 121), (1320, 121), (1400, 121), (1480, 121), (1560, 121), (1640, 121), (1720, 121),
    (1800, 121), (1880, 121), (1960, 121), (2040, 121), (2120, 121), (2200, 121), (40, 201), (120, 201), (200, 201), (280, 201),
    (360, 201), (440, 201), (520, 201), (600, 201), (680, 201), (760, 201), (840, 201), (920, 201), (1000, 201), (1080, 201),
    (1160, 201), (1240, 201), (1320, 201), (1400, 201), (1480, 201), (1560, 201), (1640, 201), (1720, 201), (1800, 201), (1880, 201),
    (1960, 201), (2040, 201), (2120, 201), (2200, 201), (40, 281), (120, 281), (200, 281), (280, 281), (360, 281), (440, 281),
    (520, 281), (600, 281), (680, 281), (760, 281), (840, 281), (920, 281), (1000, 281), (1080, 281), (1160, 281), (1240, 281),
    (1320, 281), (1400, 281), (1480, 281), (1560, 281), (1640, 281), (1720, 281), (1800, 281), (40, 361), (120, 361), (200, 361),
    (280, 361), (360, 361), (440, 361), (520, 361), (600, 361), (680, 361), (760, 361), (840, 361), (920, 361), (1000, 361),
    (1080, 361), (1160, 361), (1240, 361), (1320, 361), (1400, 361), (1480, 361), (1560, 361), (1640, 361), (1720, 361), (1800, 361),
    (40, 441), (120, 441), (200, 441), (280, 441), (360, 441), (440, 441), (520, 441), (600, 441), (680, 441), (760, 441),
    (840, 441), (920, 441), (1000, 441), (1080, 441), (1160, 441), (1240, 441), (1320, 441), (1400, 441), (1480, 441), (1560, 441),
    (1640, 441), (1720, 441), (1800, 441), (40, 521), (120, 521), (200, 521), (280, 521), (360, 521), (440, 521), (520, 521),
    (600, 521), (680, 521), (760, 521), (840, 521), (920, 521), (1000, 521), (1080, 521), (1160, 521), (1240, 521), (1320, 521),
    (1400, 521), (1480, 521), (1560, 521), (1640, 521), (1720, 521), (1800, 521), (40, 601), (120, 601), (200, 601), (280, 601),
    (360, 601), (440, 601), (520, 601), (600, 601), (680, 601), (760, 601), (840, 601), (920, 601), (1000, 601), (1080, 601),
    (1160, 601), (1240, 601), (1320, 601), (1400, 601), (1480, 601), (1560, 601), (1640, 601), (1720, 601), (1800, 601), (1880, 601),
    (40, 681), (120, 681), (200, 681), (280, 681), (360, 681), (440, 681), (520, 681), (600, 681), (680, 681), (760, 681),
    (840, 681), (920, 681), (1000, 681), (1080, 681), (1160, 681), (1240, 681), (1320, 681), (1400, 681), (1480, 681), (1560, 681),
    (1640, 681), (1720, 681), (1800, 681), (1880, 681), (40, 761), (120, 761), (200, 761), (280, 761), (360, 761), (440, 761),
    (520, 761), (600, 761), (680, 761), (760, 761), (840, 761), (920, 761), (1000, 761), (1080, 761), (1160, 761), (1240, 761),
    (1320, 761), (1400, 761), (1480, 761), (1560, 761), (1640, 761), (1720, 761), (1800, 761), (1880, 761), (40, 841), (120, 841),
    (200, 841), (280, 841), (360, 841), (440, 841), (520, 841), (600, 841), (680, 841), (760, 841), (840, 841), (920, 841),
    (1000, 841), (1080, 841), (1160, 841), (1240, 841), (1320, 841), (1400, 841), (1480, 841), (1560, 841), (1640, 841), (1720, 841),
    (40, 921), (120, 921), (200, 921), (280, 921), (360, 921), (440, 921), (520, 921), (600, 921), (680, 921), (760, 921),
    (840, 921), (920, 921), (1000, 921), (1080, 921), (1160, 921), (1240, 921), (1320, 921), (1400, 921), (1480, 921), (1560, 921),
    (1640, 921), (1720, 921), (40, 1001), (120, 1001), (200, 1001), (280, 1001), (360, 1001), (440, 1001), (520, 1001), (40, 1081),
    (120, 1081), (200, 1081), (280, 1081), (360, 1081), (440, 1081), (520, 1081), (40, 1161), (120, 1161), (200, 1161), (280, 1161),
    (360, 1161), (440, 1161), (520, 1161), (40, 1241), (120, 1241), (200, 1241), (280, 1241), (360, 1241), (440, 1241), (520, 1241),
    (2280, 41), (2280, 121), (2280, 201), (1880, 281), (1960, 281), (2040, 281), (2120, 281), (2200, 281), (2280, 281), (1880, 361),
    (1880, 441), (1880, 521), (1960, 521), (1960, 601), (1960, 681), (1960, 761), (1800, 841), (1880, 841), (1960, 841), (1800, 921),
    (600, 1001), (680, 1001), (760, 1001), (840, 1001), (920, 1001), (1000, 1001), (1080, 1001), (1160, 1001), (1240, 1001), (1320, 1001),
    (1400, 1001), (1480, 1001), (1560, 1001), (1640, 1001), (1720, 1001), (1800, 1001), (600, 1081), (600, 1161), (600, 1241), (40, 1321),
    (120, 1321), (200, 1321), (280, 1321), (360, 1321), (440, 1321), (520, 1321), (600, 1321)
]
for area in functional_areas.values():
    all_points.extend(area['coords'])

# --- 绘图 ---
fig, ax = plt.subplots(figsize=(24, 16))

# --- **核心逻辑变更**：绘制平滑的功能区和标签 ---
for name, data in functional_areas.items():
    if not data['coords']:
        continue

    # 1. 将该区域的所有方块融合成一个平滑的多边形
    area_squares = [box(cx - grid_size/2, cy - grid_size/2, cx + grid_size/2, cy + grid_size/2) for (cx, cy) in data['coords']]
    area_shape = unary_union(area_squares)

    # 2. 绘制这个平滑的多边形（或多个多边形）
    def plot_shape(shape, axis, color, alpha, zorder):
        if isinstance(shape, Polygon):
            # 绘制外边界并填充
            axis.fill(*shape.exterior.xy, facecolor=color, alpha=alpha, zorder=zorder)
            # 为多边形内部的"洞"填充白色背景
            for interior in shape.interiors:
                axis.fill(*interior.xy, facecolor='white', zorder=zorder)
        elif isinstance(shape, MultiPolygon):
            # 遍历并绘制每个独立部分
            for geom in shape.geoms:
                plot_shape(geom, axis, color, alpha, zorder)

    plot_shape(area_shape, ax, data['color'], alpha_value, zorder=1)

    # 3. 在区域的几何中心放置标签
    centroid = area_shape.centroid
    text_color = '#212121' # 深灰色字
    ax.text(centroid.x, centroid.y, name,
            fontproperties=my_font,
            ha='center', va='center',
            color=text_color,
            zorder=2
           )

# --- 绘制最外层黑色边框 (逻辑不变) ---
all_squares = [box(cx - grid_size/2, cy - grid_size/2, cx + grid_size/2, cy + grid_size/2) for (cx, cy) in all_points]
outline_shape = unary_union(all_squares)
if isinstance(outline_shape, Polygon):
    ax.plot(*outline_shape.exterior.xy, color='black', linewidth=2.5, solid_capstyle='round', zorder=3)
elif isinstance(outline_shape, MultiPolygon):
    for geom in outline_shape.geoms:
        ax.plot(*geom.exterior.xy, color='black', linewidth=2.5, solid_capstyle='round', zorder=3)

# --- 图表美化 ---
ax.set_title('功能区域分布图', fontproperties=title_font, pad=20)

legend_patches = [patches.Patch(facecolor=data['color'], alpha=alpha_value, label=f'{name} (面积: {len(data["coords"])*grid_size*grid_size/10000:.2f} m²)') for name, data in functional_areas.items()]
ax.legend(handles=legend_patches, prop=legend_font, bbox_to_anchor=(1.01, 1), loc='upper left')

ax.autoscale_view()
ax.set_aspect('equal', adjustable='box')


ax.axis('off') # 直接关闭整个坐标轴框架，效果更简洁

plt.tight_layout(rect=[0, 0, 0.85, 1])
plt.show()